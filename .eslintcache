[{"/Users/hugomota/Projects/memory-game/src/index.tsx":"1","/Users/hugomota/Projects/memory-game/src/serviceWorker.ts":"2","/Users/hugomota/Projects/memory-game/src/app/store.ts":"3","/Users/hugomota/Projects/memory-game/src/features/counter/counterSlice.ts":"4","/Users/hugomota/Projects/memory-game/src/features/counter/Counter.tsx":"5","/Users/hugomota/Projects/memory-game/src/components/index.ts":"6","/Users/hugomota/Projects/memory-game/src/components/Button/Button.tsx":"7","/Users/hugomota/Projects/memory-game/src/components/App/App.tsx":"8","/Users/hugomota/Projects/memory-game/src/pages/index.ts":"9","/Users/hugomota/Projects/memory-game/src/pages/ScorePage/ScorePage.tsx":"10","/Users/hugomota/Projects/memory-game/src/pages/BoardPage/BoardPage.tsx":"11","/Users/hugomota/Projects/memory-game/src/pages/HomePage/HomePage.tsx":"12","/Users/hugomota/Projects/memory-game/src/common/Theme/Theme.tsx":"13","/Users/hugomota/Projects/memory-game/src/common/theme/theme.tsx":"14","/Users/hugomota/Projects/memory-game/src/common/index.ts":"15","/Users/hugomota/Projects/memory-game/src/common/Typography/Typography.tsx":"16","/Users/hugomota/Projects/memory-game/src/common/typography/typography.tsx":"17","/Users/hugomota/Projects/memory-game/src/components/Input/Input.tsx":"18","/Users/hugomota/Projects/memory-game/src/common/useForm/useForm.tsx":"19","/Users/hugomota/Projects/memory-game/src/constants/forms.ts":"20"},{"size":442,"mtime":1610314581477,"results":"21","hashOfConfig":"22"},{"size":5424,"mtime":1609540052411,"results":"23","hashOfConfig":"22"},{"size":414,"mtime":1609540052406,"results":"24","hashOfConfig":"22"},{"size":1851,"mtime":1609540052408,"results":"25","hashOfConfig":"22"},{"size":1626,"mtime":1609540052408,"results":"26","hashOfConfig":"22"},{"size":144,"mtime":1610314775359,"results":"27","hashOfConfig":"22"},{"size":529,"mtime":1610321113629,"results":"28","hashOfConfig":"22"},{"size":1330,"mtime":1610314540664,"results":"29","hashOfConfig":"22"},{"size":147,"mtime":1610277476138,"results":"30","hashOfConfig":"22"},{"size":127,"mtime":1610277413972,"results":"31","hashOfConfig":"22"},{"size":133,"mtime":1610277427649,"results":"32","hashOfConfig":"22"},{"size":1279,"mtime":1610321983269,"results":"33","hashOfConfig":"22"},{"size":91,"mtime":1610310886964,"results":"34","hashOfConfig":"22"},{"size":90,"mtime":1610321038126,"results":"35","hashOfConfig":"22"},{"size":93,"mtime":1610316772984,"results":"36","hashOfConfig":"22"},{"size":215,"mtime":1610311726477,"results":"37","hashOfConfig":"22"},{"size":215,"mtime":1610311726477,"results":"38","hashOfConfig":"22"},{"size":488,"mtime":1610321827927,"results":"39","hashOfConfig":"22"},{"size":3289,"mtime":1610316831729,"results":"40","hashOfConfig":"22"},{"size":243,"mtime":1610317118608,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"skf0vu",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/hugomota/Projects/memory-game/src/index.tsx",[],["85","86"],"/Users/hugomota/Projects/memory-game/src/serviceWorker.ts",[],"/Users/hugomota/Projects/memory-game/src/app/store.ts",[],"/Users/hugomota/Projects/memory-game/src/features/counter/counterSlice.ts",[],"/Users/hugomota/Projects/memory-game/src/features/counter/Counter.tsx",[],"/Users/hugomota/Projects/memory-game/src/components/index.ts",[],"/Users/hugomota/Projects/memory-game/src/components/Button/Button.tsx",[],"/Users/hugomota/Projects/memory-game/src/components/App/App.tsx",[],"/Users/hugomota/Projects/memory-game/src/pages/index.ts",[],"/Users/hugomota/Projects/memory-game/src/pages/ScorePage/ScorePage.tsx",[],"/Users/hugomota/Projects/memory-game/src/pages/BoardPage/BoardPage.tsx",[],"/Users/hugomota/Projects/memory-game/src/pages/HomePage/HomePage.tsx",[],"/Users/hugomota/Projects/memory-game/src/common/Theme/Theme.tsx",[],"/Users/hugomota/Projects/memory-game/src/common/theme/theme.tsx",[],"/Users/hugomota/Projects/memory-game/src/common/index.ts",[],"/Users/hugomota/Projects/memory-game/src/common/Typography/Typography.tsx",[],"/Users/hugomota/Projects/memory-game/src/common/typography/typography.tsx",[],["87","88"],"/Users/hugomota/Projects/memory-game/src/components/Input/Input.tsx",[],"/Users/hugomota/Projects/memory-game/src/common/useForm/useForm.tsx",["89","90"],"import { useState, useEffect, useCallback } from 'react'\n\nexport interface IUseForm {\n  disable: boolean\n  handleBlur: Function\n  handleChange: Function\n  handleSubmit: Function\n  values: { [key: string]: any }\n  errors: { [key: string]: object }\n}\n\nconst useForm = (\n  initialValues: { [key: string]: any },\n  validationSchema: { [key: string]: any },\n  callback?: Function\n) => {\n  const [values, setValues] = useState<{ [key: string]: any }>(initialValues)\n  const [errors, setErrors] = useState<{ [key: string]: object }>({})\n  const [disable, setDisable] = useState<boolean>(true)\n  const [isDirty, setIsDirty] = useState<boolean>(false)\n  const [step, setStep] = useState(0)\n\n  // Check if is a step validation and select the schema by steps\n  if (Array.isArray(validationSchema)) validationSchema = validationSchema[step]\n\n  // Disable button in initial render.\n  useEffect(() => {\n    setDisable(isFormValid())\n  }, [])\n\n  // For every changed in our state this will be fired\n  // To be able to disable the button\n  useEffect(() => {\n    if (isDirty) setDisable(isFormValid())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [values, isDirty, step])\n\n  // Used to disable submit button if there's an error in state\n  // or the required field in state has no value.\n  const isFormValid = useCallback(() => {\n    const hasErrorInForm = Object.keys(validationSchema).some(key => {\n      const error = errors[key] ? errors[key] : null\n      const isInputFieldRequired = validationSchema[key].required\n\n      return error || (isInputFieldRequired && !values[key])\n    })\n\n    return hasErrorInForm\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [values, validationSchema])\n\n  // Validation by field\n  const validateField = useCallback(\n    (event, trimValue = false) => {\n      setIsDirty(true)\n      const name = event.target ? event.target.name : event.name\n      let value = event.target ? event.target.value : event.value\n\n      if (trimValue) {\n        value = value.trim()\n      }\n\n      let error = validationSchema[name].required && (!value || !value.length) ? 'This field is required' : ''\n\n      if (validationSchema[name].validator !== null && typeof validationSchema[name].validator === 'object') {\n        if (value && !validationSchema[name].validator.regEx.test(value)) {\n          error = validationSchema[name].validator.error\n        }\n      }\n\n      setValues(prevState => ({ ...prevState, [name]: value }))\n      setErrors(prevState => ({ ...prevState, [name]: error }))\n    },\n    [validationSchema]\n  )\n\n  const handleSubmit = useCallback(\n    (event?: any) => {\n      event && event.preventDefault()\n      // Make sure that isFormValid returns false\n      // Before calling the submit callback function\n      if (!isFormValid()) {\n        callback && callback(values, resetForm)\n      }\n    },\n    [callback, values, isFormValid]\n  )\n\n  const handleChange = (e: any) => validateField(e)\n  const handleBlur = (e: any) => validateField(e, true)\n\n  const resetForm = () => {\n    setValues(initialValues)\n    setErrors({})\n    setIsDirty(true)\n    setStep(0)\n  }\n\n  return {\n    values,\n    errors,\n    disable,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    step,\n    setStep,\n    resetForm,\n  }\n}\n\nexport default useForm\n","/Users/hugomota/Projects/memory-game/src/constants/forms.ts",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"91","replacedBy":"95"},{"ruleId":"93","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":29,"column":6,"nodeType":"99","endLine":29,"endColumn":8,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"101","line":86,"column":5,"nodeType":"99","endLine":86,"endColumn":36,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],["103"],["104"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isFormValid'. Either include it or remove the dependency array.","ArrayExpression",["105"],"React Hook useCallback has a missing dependency: 'resetForm'. Either include it or remove the dependency array.",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [isFormValid]",{"range":"111","text":"112"},"Update the dependencies array to be: [isFormValid, callback, values, resetForm]",{"range":"113","text":"114"},[924,926],"[isFormValid]",[2859,2890],"[isFormValid, callback, values, resetForm]"]